// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	favorite "github.com/uesleicarvalhoo/aiqfome/favorite"

	uuid "github.com/uesleicarvalhoo/aiqfome/pkg/uuid"
)

// Reader is an autogenerated mock type for the Reader type
type Reader struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, clientID, productID
func (_m *Reader) Find(ctx context.Context, clientID uuid.ID, productID int) (favorite.Favorite, error) {
	ret := _m.Called(ctx, clientID, productID)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 favorite.Favorite
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.ID, int) (favorite.Favorite, error)); ok {
		return rf(ctx, clientID, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.ID, int) favorite.Favorite); ok {
		r0 = rf(ctx, clientID, productID)
	} else {
		r0 = ret.Get(0).(favorite.Favorite)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.ID, int) error); ok {
		r1 = rf(ctx, clientID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaginateByClientID provides a mock function with given fields: ctx, clientID, page, pageSize
func (_m *Reader) PaginateByClientID(ctx context.Context, clientID uuid.ID, page int, pageSize int) ([]favorite.Favorite, int, error) {
	ret := _m.Called(ctx, clientID, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for PaginateByClientID")
	}

	var r0 []favorite.Favorite
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.ID, int, int) ([]favorite.Favorite, int, error)); ok {
		return rf(ctx, clientID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.ID, int, int) []favorite.Favorite); ok {
		r0 = rf(ctx, clientID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]favorite.Favorite)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.ID, int, int) int); ok {
		r1 = rf(ctx, clientID, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.ID, int, int) error); ok {
		r2 = rf(ctx, clientID, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewReader creates a new instance of Reader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reader {
	mock := &Reader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
