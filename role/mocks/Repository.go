// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	role "github.com/uesleicarvalhoo/aiqfome/role"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// FindPermissions provides a mock function with given fields: ctx, r
func (_m *Repository) FindPermissions(ctx context.Context, r role.Role) ([]role.Permission, error) {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for FindPermissions")
	}

	var r0 []role.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, role.Role) ([]role.Permission, error)); ok {
		return rf(ctx, r)
	}
	if rf, ok := ret.Get(0).(func(context.Context, role.Role) []role.Permission); ok {
		r0 = rf(ctx, r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]role.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, role.Role) error); ok {
		r1 = rf(ctx, r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
