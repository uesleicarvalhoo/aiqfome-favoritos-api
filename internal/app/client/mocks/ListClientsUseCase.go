// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/uesleicarvalhoo/aiqfome/internal/app/client/dto"
)

// ListClientsUseCase is an autogenerated mock type for the ListClientsUseCase type
type ListClientsUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, p
func (_m *ListClientsUseCase) Execute(ctx context.Context, p dto.ListClientsParams) (dto.PaginatedClients, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 dto.PaginatedClients
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListClientsParams) (dto.PaginatedClients, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ListClientsParams) dto.PaginatedClients); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(dto.PaginatedClients)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ListClientsParams) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewListClientsUseCase creates a new instance of ListClientsUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListClientsUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListClientsUseCase {
	mock := &ListClientsUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
