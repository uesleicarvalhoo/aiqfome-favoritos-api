// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/uesleicarvalhoo/aiqfome/internal/app/client/dto"

	uuid "github.com/uesleicarvalhoo/aiqfome/pkg/uuid"
)

// FindClientUseCase is an autogenerated mock type for the FindClientUseCase type
type FindClientUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, id
func (_m *FindClientUseCase) Execute(ctx context.Context, id uuid.ID) (dto.Client, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 dto.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.ID) (dto.Client, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.ID) dto.Client); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(dto.Client)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.ID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFindClientUseCase creates a new instance of FindClientUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindClientUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindClientUseCase {
	mock := &FindClientUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
