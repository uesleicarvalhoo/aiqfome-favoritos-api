// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/uesleicarvalhoo/aiqfome/internal/app/auth/dto"
)

// SignInUseCase is an autogenerated mock type for the SignInUseCase type
type SignInUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, params
func (_m *SignInUseCase) Execute(ctx context.Context, params dto.SignInParams) (dto.AuthTokens, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 dto.AuthTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SignInParams) (dto.AuthTokens, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.SignInParams) dto.AuthTokens); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(dto.AuthTokens)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.SignInParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignInUseCase creates a new instance of SignInUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignInUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignInUseCase {
	mock := &SignInUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
