// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "github.com/uesleicarvalhoo/aiqfome/internal/app/auth/dto"

	user "github.com/uesleicarvalhoo/aiqfome/user"
)

// SignUpUseCase is an autogenerated mock type for the SignUpUseCase type
type SignUpUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, params
func (_m *SignUpUseCase) Execute(ctx context.Context, params dto.SignUpParams) (user.User, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.SignUpParams) (user.User, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.SignUpParams) user.User); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.SignUpParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSignUpUseCase creates a new instance of SignUpUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSignUpUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *SignUpUseCase {
	mock := &SignUpUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
