// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	jwt "github.com/uesleicarvalhoo/aiqfome/pkg/jwt"

	time "time"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

// Generate provides a mock function with given fields: ctx, sub, d
func (_m *Provider) Generate(ctx context.Context, sub string, d time.Duration) (string, error) {
	ret := _m.Called(ctx, sub, d)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, sub, d)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, sub, d)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, sub, d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, tokenStr
func (_m *Provider) Validate(ctx context.Context, tokenStr string) (jwt.Claims, error) {
	ret := _m.Called(ctx, tokenStr)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 jwt.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (jwt.Claims, error)); ok {
		return rf(ctx, tokenStr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) jwt.Claims); ok {
		r0 = rf(ctx, tokenStr)
	} else {
		r0 = ret.Get(0).(jwt.Claims)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
